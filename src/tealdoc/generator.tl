local tealdoc = require("tealdoc")
local log = require("tealdoc.log")

local record Generator
    record Attribute 
        name: string
    end

    attr: function(name: string): Attribute

    interface Builder
        type Content = string | function(b: Builder) | Attribute

        h1: function(self, ...: Content): Builder
        h2: function(self, ...: Content): Builder
        h3: function(self, ...: Content): Builder
        h4: function(self, ...: Content): Builder
        h5: function(self, ...: Content): Builder
        h6: function(self, ...: Content): Builder
        line: function(self, ...: Content): Builder
        rawline: function(self, ...: Content): Builder
        text: function(self, ...: Content): Builder
        rawtext: function(self, ...: Content): Builder
        paragraph: function(self, ...: Content): Builder
        link: function(self, to: string, ...: Content): Builder

        code_block: function(self, content: Content): Builder
        ordered_list: function(self, content: function(item: function(content: function))): Builder
        unordered_list: function(self, content: function(item: function(content: function))): Builder

        b: function(self, ...: Content): Builder
        i: function(self, ...: Content): Builder
        code: function(self, ...: Content): Builder
        md: function(self, content: string): Builder

        build: function(self): string
    end

    

    enum PathMode
        "full" -- full path to the item
        "relative" -- relative path to the item from the module
        "none" -- no path, just the item name
    end

    interface Phase
        interface Context
            builder: Builder
            module_name: string
            path_mode: PathMode
            env: tealdoc.Env
            filter: function(item: tealdoc.Item, env: tealdoc.Env): boolean
        end

        name: string
        run: function(ctx: Context, item: tealdoc.Item)
    end

    record Base
        on_item_start: function(self, item: tealdoc.Item, module_name: string, env: tealdoc.Env)
        on_item_end: function(self, item: tealdoc.Item, module_name: string, env: tealdoc.Env)
        on_context_for_item: function(self, ctx: Generator.Phase.Context, item: tealdoc.Item, module_name: string, env: tealdoc.Env)

        on_item_phase: function(self, item: tealdoc.Item, phase: Generator.Phase, ctx: Generator.Phase.Context, env: tealdoc.Env): boolean

        on_start: function(self, env: tealdoc.Env)
        on_end: function(self, env: tealdoc.Env)

        item_phases: {string: {Generator.Phase}}

        run: function(self, env: tealdoc.Env)
        init: function(): Base
    end
end

Generator.attr = function(name: string): Generator.Attribute
    return {name = name}
end

local function filter(item: tealdoc.Item, env: tealdoc.Env): boolean
    local is_module_record = env.registry["$"..item.path] ~= nil

    if not env.include_all then
        local has_local_tag = item.attributes and item.attributes["local"]
        local is_declared_as_local = item is tealdoc.DeclarationItem and item.visibility == "local"
        if has_local_tag or (is_declared_as_local and not is_module_record) then
            return false
        end
    end

    -- hack for not for not including autogenerated __is metamethod from where clause
    if item is tealdoc.FunctionItem and item.function_kind == "metamethod" and item.name == "__is" then
        return false
    end

    return true
end

local function visit_item(generator: Generator.Base, module_name: string, item: tealdoc.Item, env: tealdoc.Env)
    if not filter(item, env) then
        return
    end

    if generator.on_item_start then
        generator:on_item_start(item, module_name, env)
    end

    if not item.text and not (item.kind == "overload" or item.kind == "metafields") and not env.no_warnings_on_missing then
        log:warning("Documentation missing for item: " .. item.path)
    end

    local ctx: Generator.Phase.Context = {
        module_name = module_name,
        env = env,
        filter = filter
    }

    if generator.on_context_for_item then
        generator:on_context_for_item(ctx, item, module_name, env)
    end

    local phases = generator.item_phases[item.kind]
    if phases and not (item.path == module_name) then -- skip module record
        for _, phase in ipairs(phases) do
            if generator.on_item_phase then
                if generator:on_item_phase(item, phase, ctx, env) then  
                    phase.run(ctx, item)
                end
            else
                phase.run(ctx, item)
            end
        end
    end

    if item.children and not (item.kind == "function") then -- we skip inner declarations currently
        for _, child_name in ipairs(item.children) do
            local child_item = env.registry[child_name]
            assert(child_item)
            visit_item(generator, module_name, child_item, env)
        end
    end

    if generator.on_item_end then
        generator:on_item_end(item, module_name, env)
    end
end

Generator.Base.run = function(self, env: tealdoc.Env)
    if self.on_start then
        self:on_start(env)
    end
    for _, item in ipairs(env.modules) do
        local module_item = env.registry["$"..item]
        visit_item(self, item, module_item, env)
    end
    if self.on_end then
        self:on_end(env)
    end
end

Generator.Base.init = function(): Generator.Base
    return {
        item_phases = {},
        run = Generator.Base.run,
    }
end



return Generator