local tealdoc = require("tealdoc")
local Generator = require("tealdoc.generator")
local HTMLBuilder = require("tealdoc.generator.html.builder")
local default_css = require("tealdoc.generator.html.default_css")
local log = require("tealdoc.log")
local lfs = require("lfs")


-- TODO: duplicate from signatures.tl
local function strip_module_prefix(path: string, module_name: string): string
    return path:sub(#module_name + 2) -- +2 for the dot after module name
end

local record HTMLGenerator is Generator.Base
    item_phases: {string: {Generator.Phase}}
    generate_item: function(self, builder: HTMLBuilder, item: tealdoc.Item, env: tealdoc.Env, module_name: string)
end

local function filter(item: tealdoc.Item, env: tealdoc.Env): boolean
    local is_module_record = env.registry["$"..item.path] ~= nil
    
    if not env.include_all then
        local has_local_tag = item.attributes and item.attributes["local"]
        local is_declared_as_local = item is tealdoc.DeclarationItem and item.visibility == "local"
        if has_local_tag or (is_declared_as_local and not is_module_record) then
            return false
        end
    end

    -- hack for not for not including autogenerated __is metamethod from where clause
    if item is tealdoc.FunctionItem and item.function_kind == "metamethod" and item.name == "__is" then
        return false
    end

    return true
end

HTMLGenerator.item_phases = {}

function HTMLGenerator.generate_item(self: HTMLGenerator, builder: HTMLBuilder, item: tealdoc.Item, env: tealdoc.Env, module_name: string)
    if not filter(item, env) then
        return
    end

    if not item.text and not (item.kind == "overload" or item.kind == "metafields") and not env.no_warnings_on_missing then
        log:warning("Documentation missing for item: " .. item.path)
    end

    local ctx: Generator.Phase.Context = {
        builder = builder,
        module_name = module_name,
        env = env,
        filter = filter,
        path_mode = "relative",
    }
    local phases = self.item_phases[item.kind]
    if phases and not (item.path == module_name) then -- skip module record 
        for _, phase in ipairs(phases) do
            if phase.name == "header" then -- hack
                builder:rawtext("<h3 id=\"" .. item.path .. "\">")
                builder:text(strip_module_prefix(item.path, module_name))
                builder:rawtext("</h3>")
            elseif phase.name == "module_header" then
                builder:rawtext("<h1 id=\"" .. item.name .. "\">")
                builder:text("Module "..(item.name))
                builder:rawtext("</h1>")
            else
                phase.run(ctx, item)
            end
        end
    end

    if item.children and not (item.kind == "function") then -- we skip inner declarations currently
        for _, child_name in ipairs(item.children) do
            local child_item = env.registry[child_name]
            assert(child_item)
            self:generate_item(builder, child_item, env, module_name)
        end
    end
end

function HTMLGenerator:generate_breadcrumbs(b: HTMLBuilder, visited: {string}, env: tealdoc.Env)
    b:rawline("<nav>")
    b:unordered_list(function(item: function(content: function))
        local path: string
        for i, v in ipairs(visited) do
            if i == #visited then -- last item is not a link
                item(function()
                    b:text(v) 
                end)
            elseif i == 1 then -- first item is always index
                local prefix = string.rep("../", #visited - 2) 
                item(function()
                    b:rawtext("<a href=\"" .. prefix .. v .. ".html\">")
                    b:text(v)
                    b:rawtext("</a> / ")
                end)
            else
                if not path then
                    path = v
                else
                    path = path .. "." .. v
                end
                local prefix = string.rep("../", #visited - i)
                item(function()
                    if path and env.registry["$"..path] then
                        b:rawtext("<a href=\"" .. prefix .. v .. ".html\">")
                        b:text(v)
                        b:rawtext("</a>")
                    else
                        b:text(v)
                    end
                    b:rawtext(" / ")
                end)
            end
        end
    end)
    b:rawline("</nav>")
end

function HTMLGenerator:file(path: string, content: function(b: HTMLBuilder))
    local b = HTMLBuilder.init()

    b:rawline("<!DOCTYPE html>")
    b:rawline("<html lang=\"en\">")
    b:rawline("<head>")
    b:rawline("<meta charset=\"UTF-8\">")
    b:rawline("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">")
    b:rawline("<title>Tealdoc Documentation</title>")
    b:rawline("<style>")
    b:rawline(default_css)
    b:rawline("</style>")
    b:rawline("</head>")
    b:rawline("<body>")
    content(b)
    b:rawline("<footer>")
    b:rawline("<small>generated using <a href=\"https://github.com/teal-language/tealdoc\" target=\"_blank\">tealdoc</a> " .. tealdoc.version .. "</small>")
    b:rawline("</footer>")
    b:rawline("</body>")
    b:rawline("</html>")

    local file = io.open(path..".html", "w")
    assert(file)

    file:write(b:build())
    file:close()
end

-- a bit of mess, we convert our modules into a tree structure
-- so we can generate a nice index page with links to each module
-- this could/should be done in parser, but least leave it here for now

local record ModuleNode
    name: string -- top level module name, last element of the path
    path: string -- full path to the module, e.g. "tealdoc.tool.html"
    -- children are submodules
    children: {ModuleNode}
end


local function convert_modules_to_tree(modules: {string}): ModuleNode
    local root: ModuleNode = {
        name = "",
        path = "",
        children = {}
    }

    local node_map: {string: ModuleNode} = {}

    -- Create nodes for all modules
    for _, module_path in ipairs(modules) do
        local parts = {}
        for part in module_path:gmatch("[^.]+") do
            table.insert(parts, part)
        end
        
        local current_path = ""
        local current_parent = root
        
        for i, part in ipairs(parts) do
            if i > 1 then
                current_path = current_path .. "."
            end
            current_path = current_path .. part
            
            if not node_map[current_path] then
                local new_node: ModuleNode = {
                    name = part,
                    path = current_path,
                    children = {}
                }
                node_map[current_path] = new_node
                table.insert(current_parent.children, new_node)
            end
            
            current_parent = node_map[current_path]
        end
    end

    return root
end

function HTMLGenerator:generate_modules(filename: string, index_builder: HTMLBuilder, modules: {string}, env: tealdoc.Env)
    local module_tree = convert_modules_to_tree(modules)

    local visited = {"index"}

    local function traverse(cur_filename: string, node: ModuleNode)
        local module_item = env.registry["$"..node.path]

        if node.name ~= "" then
            table.insert(visited, node.name)
        end

        if not module_item then
            index_builder:text(node.name)
        else 
            local path = cur_filename .."/".. node.name

            self:file(path, function(b: HTMLBuilder)
                b:rawline("<main>")
                self:generate_breadcrumbs(b, visited, env)
                self:generate_item(b, module_item, env, node.path)
                b:rawline("</main>")
            end)

            local link = path:sub(#filename + 2)
            index_builder:rawtext("<a href=\"" ..link.. ".html\">")
            index_builder:text(node.name)
            index_builder:rawtext("</a>")
        end

        if #node.children > 0 then
            index_builder:rawline("<ul class=\"tree-list\">")
            for _, child in ipairs(node.children) do
                index_builder:rawline("<li>")
                local path: string = cur_filename
                if node.name ~= "" then
                    path = path .. "/".. node.name
                end
                lfs.mkdir(path)
                traverse(path, child)
                index_builder:rawline("</li>")
            end
            index_builder:rawline("</ul>")
        end

        if node.name ~= "" then
            table.remove(visited)
        end
    end

    traverse(filename, module_tree)
end


HTMLGenerator.run = function(self: HTMLGenerator, filename: string, env: tealdoc.Env)
    -- TODO: handle error
    lfs.mkdir(filename)
    local path = filename .. "/index"
    self:file(path, function(b: HTMLBuilder)
        b:rawline("<main>")
        b:h1("Documentation Index")
        self:generate_modules(filename, b, env.modules, env)
        b:rawline("</main>")
    end)
end

return HTMLGenerator